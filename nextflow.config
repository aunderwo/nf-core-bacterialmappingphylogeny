/*
 * -------------------------------------------------
 *  nf-core/bactmap Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Input options
  input                      = ''

  // Reference
  reference                  = ''

  // ******************* OPTIONAL PROCESSES ******************* //
  // Trimming
  trim                       = true
  save_trimmed_fail          = false
  adapter_file               = "${baseDir}/assets/adapters.fas"

  //When downsampling specifiy the maximum coverage depth
  subsampling_off            = false
  subsampling_depth_cutoff   = 100

  // When downsampling and all samples have the same expected genome size specify as e.g 210820b or 2.1mb
  genome_size                = false 

  // Remove recombination using gubbins prior to building tree
  remove_recombination       = false

  //Maximum non GATC bases (i.e - and N) to allow in pseudogenome sequences
  non_GATC_threshold         = 0.5

  // Which tree building alogorithms to use
  rapidnj                    = false
  fasttree                   = false
  iqtree                     = false
  raxmlng                    = false

  // Boilerplate options
  outdir                            = './results'
  tracedir                          = "${params.outdir}/pipeline_info"
  publish_dir_mode                  = 'copy'
  email                             = ''
  email_on_fail                     = ''
  plaintext_email                   = false
  max_multiqc_email_size            = '25.MB'
  skip_multiqc                      = false
  enable_conda                      = false
  validate_params                   = true
  show_hidden_params                = false
  schema_ignore_params              = 'modules'
  monochrome_logs                   = false
  help                              = false
  singularity_pull_docker_container = false
  
  // Config options
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                 = '16.GB'
  max_cpus                   = 4
  max_time                   = '168.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}


profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda { params.enable_conda = true              }
  docker {
    docker.enabled    = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    singularity.cacheDir   = "${baseDir}/singularity"
  }
  podman {
    podman.enabled = true
  }
  test      { includeConfig 'conf/test.config'      }
  test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name            = 'nf-core/bactmap'
  author          = 'Anthony Underwood'
  homePage        = 'https://github.com/nf-core/bactmap'
  description     = 'A mapping-based pipeline for creating a phylogeny from bacterial whole genome sequences'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=20.11.0-edge'
  version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
